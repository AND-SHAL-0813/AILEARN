# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ALRFona9g5QzV_gA8D_HPLNXj_9ikBun
"""

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([1,2,3,4,5,6,7,8,9,10])
y = np.array([2,5,10,17,26,37,50,65,82,101])

#fit a quadratic polynomial(n=2)
coefficients = np.polyfit(x,y,2)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=2)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([1,2,3,4,5,6,7,8,9,10])
y = np.array([3,52,357,1248,3123,6562,12075,20352,32493,50000])

#fit a quadratic polynomial(n=3)
coefficients = np.polyfit(x,y,3)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=3)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([0,1,2,3,4,5,6,7,8,9])
y = np.array([1,3,5,7,9,11,13,15,17,19])

#fit a quadratic polynomial(n=2)
coefficients = np.polyfit(x,y,2)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=2)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([1,2,3,4,5,6,7,8,9,10])
y = np.array([4,122,1027,5126,15625,37322,78029,148620,260105,421650])

#fit a quadratic polynomial(n=3)
coefficients = np.polyfit(x,y,3)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=3)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([1,2,3,4,5,6,7,8,9,10])
y = np.array([5,67,430,1507,3750,7771,14192,23935,37722,56575])

#fit a quadratic polynomial(n=3)
coefficients = np.polyfit(x,y,3)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=3)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)

import numpy as np
import matplotlib.pyplot as plt
# Data points
x = np.array([0,1,2,3,4,5,6,7,8,9])
y = np.array([1,4,15,40,85,156,259,400,585,820])

#fit a quadratic polynomial(n=3)
coefficients = np.polyfit(x,y,3)

#predicted values
y_pred = np.polyval(coefficients,x)

#residuals
residuals = y-y_pred
#plotting the polynomial fit
plt.figure(figsize=(10,5))

#plot 1: polynomial fit
x_fine = np.linspace(min(x),max(x),500) #for smooth plotting of the curve
y_fine = np.polyval(coefficients,x_fine)
plt.plot(x_fine,y_fine,color="red",label=f'fitted polynomial (n=3)')
plt.scatter(x,y,label="original data",color='blue')
plt.title('polynomial fitting')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)

#show plot
plt.tight_layout()
plt.show()

#output results
print("fitted coefficients:", coefficients)
print("pridected variables:",y_pred)
print("residuals:",residuals)